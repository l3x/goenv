#!/bin/bash
read -d '' INFO << TEXT
Filename:     goenv
Version:      2.0.0
Purpose:      To manage your Go (golang) environment
Copyright:    United Ledger, LLC

Assumptions: 
* You must have  access to the internet and git to install a new Go version.
* Your OS's equivalent of build-essential must also be installed to install Go.
* egrep and standard shell commands like grep, echo, printf and cat must be installed.
* Go must already be installed (via your system package manager)/
* The install goenv command adds goenv to your PATH env var in the bashrc file.
* (Move that PATH command appropriately if you are using a shell other than Bash.)

Notes:
* goenv allows you to manage multiple versions of Go.
* No shims. No rehashing. Just plain shell commands.
* goenv version works on linux (likley also works on macOS and Windows).
* You must be in a GOPATH directory to run the set command.
* Source goenv commands that update environment variables. See examples.
* A Go binary must already be installed on your system
- See https://golang.org/doc/install
- macOS: brew install go
- linux: https://www.ostechnix.com/install-go-language-linux/

* To install goenv (manages your installed versions of Go) run the following:
git clone https://github.com/l3x/goenv.git ~/.goenv
~/.goenv/bin/goenv install goenv

* To uninstall goenv (and all installed goroots):
* 1) Remove the PATH export command  that was appended to your /home/lex/.bashrc
* 2) Remove the /home/lex/.goenv directory

Examples:
  goenv help                        # To print this help info
  goenv install goenv               # To put goenv on your PATH for future logins  
  goenv install go1.9.4             # To install go1.9.4 (or any Go version)
  goenv uninstall go1.9.4           # To uninstall go1.9.4 (or any installed Go version)
  goenv list-installed-versions     # To get a list of installed Go versions
  goenv list-available-versions     # To get a list of available Go versions
  goenv info                        # To print Go environment information
  goenv run-tests                   # To run goenv tests
  . goenv use go1.9.4               # Source and run this to set your Go runtime to go1.9.4
  . goenv install go1.9.5           # To install go1.9.5 and set the Go runtime to go1.9.5
  . goenv set                       # Source and run to set GOPATH, GOBIN and PATH
  . goenv cd                        # Source and run this to cd into your last/current GOPATH
TEXT

GOENV_SHELL_INIT_FILE=$HOME/.bashrc

function set_env_vars {
	export GOENV_HOME=$HOME/.goenv
	export GOENV_GOROOTS_PATH=$GOENV_HOME/goroots
	export GOENV_ENV_PATH=$GOENV_HOME/.env
	export GOENV_GO_SOURCE_REPO="https://go.googlesource.com/go"
	export GOENV_CURRENT_GOPATH=$GOENV_HOME/.current_gopath
	export GOROOT=$(get_goroot_path) 
}
function print_env_vars {
	echo "
 GOENV_HOME:            $GOENV_HOME
 GOENV_GOROOTS_PATH:    $GOENV_GOROOTS_PATH
 GOENV_ENV_PATH:        $GOENV_ENV_PATH
 GOENV_SHELL_INIT_FILE: $GOENV_SHELL_INIT_FILE
 GOENV_GO_SOURCE_REPO:  $GOENV_GO_SOURCE_REPO
 GOENV_CURRENT_GOPATH:  $GOENV_CURRENT_GOPATH
 \$(pwd):                $(pwd)
 GOROOT:                $GOROOT
 GOPATH: $GOPATH
 GOBIN:  $GOBIN
 PATH:   
$(echo $PATH | tr ':' '\n')
"
}

function strindex() { 
	x="${1%%$2*}"
	[[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
}

num_occurrences () { 
    string=$1;
    char=$2;
    if [ "$char" == "\n" ]; then
        printf "$string" | wc -l | sed 's/ //g';
    else
        awk -F"${char}" '{printf NF-1}' <<< "${string}";
    fi
}

function set_current_gopath {
	if [ ! -e "$(pwd)/src" ]; then
		err_msg="You must be in a valid go project (with a src directory) to set GOPATH, GOBIN and PATH."
		# Look for gopath dir in current path
		path=$(pwd)
		project_name="$(basename $(pwd))"
		if [ "$(num_occurrences "$path" "$project_name")" == "2" ]; then
			pos=$(strindex "$path" "$project_name")
			gopath="${path:0:$pos}$project_name"
			read x
			if [ ! -d "$gopath" ]; then
				echo $err_msg;return
			else
				cd "$gopath"
			fi
		else
			echo $err_msg;return
		fi
	fi
	set_env_vars
	printf "$(pwd)" > $GOENV_CURRENT_GOPATH
	
	export GOPATH="$(pwd)" 
	export GOBIN=$GOPATH/bin
	add_to_path $GOBIN
	
	echo "Do you want to cd into your project's source directory? (yes/no)"
	read x && x=${x:-no}
	if [ "$x" == "yes" ]; then
		src_path=$(find . -name $(basename $(pwd)))
		cd $src_path
	fi
}

function is_current_gopath_valid {
	if [ ! -e $GOENV_CURRENT_GOPATH ]; then
		printf "false"; return
	fi
	gopath=$(cat $GOENV_CURRENT_GOPATH)
	if [ ! -d "$gopath/src" ]; then
		printf "false"; return
	fi
	printf "true"
}

function cd_to_gopath {
	if [ "$(is_current_gopath_valid)" != "true" ]; then
		echo "GOENV_CURRENT_GOPATH value is not valid.  Go to a Go project directory and run the set command."
	else
		gopath=$(cat $GOENV_CURRENT_GOPATH)
		cd $gopath
		set_current_gopath
	fi
}

function is_prereq_satisfied {
	go version &>/dev/null
	if [ "$?" != "0" ]; then
		echo "Go runtime not found"
		print "false"; return
	fi
	printf "true"
}

function get_goroot {
	if [ -L $(which go) ]; then
		printf $(echo $(dirname $(dirname $(ls -l $(which go) | cut -d ' ' -f 12))))
	else
		printf $(echo $(dirname $(dirname $(ls -l $(which go) | cut -d ' ' -f 10))))
	fi
}
function test_get_goroot {
	goroot="$(get_goroot)"
	find "$goroot/src/runtime/cgo" &>/dev/null
	if [ "$?" == "0" ]; then
		echo "${FUNCNAME[0]} PASSED"
	else
		echo "${FUNCNAME[0]} FAILED"
	fi
}

# Returns "true" or "false"
function is_valid_go_ver {
	go_version=$1
	echo "$go_version" | egrep "go[0-9]\.[0-9].+" &>/dev/null
	if [ "$?" != "0" ]; then
		printf "false"
	else
		printf "true"
	fi
}
function test_is_valid_go_ver {
	if \
		[ "$(is_valid_go_ver go1.9.4)" == "true" ] && \
		[ "$(is_valid_go_ver 1.9.4)" == "false" ]; then
		echo "${FUNCNAME[0]} PASSED"
	else
		echo "${FUNCNAME[0]} FAILED"
	fi
}

function is_goenv_file_valid {
	if [ -z $GOENV_ENV_PATH ]; then
		(>&2 echo "Missing GOENV_ENV_PATH environment variable!")
		printf "false"
	fi
	if [ ! -e $GOENV_ENV_PATH ]; then
		msg="goenv_env_path ($GOENV_ENV_PATH) does not exist!  Run the following and try again:"
		msg="${msg}\n  . $(basename) init --install-go-from-source"
		(>&2 echo "$msg")
		printf "false"
	fi
	printf "true"
}
function test_is_goenv_file_valid {
	touch $GOENV_HOME
	if [ "$(is_goenv_file_valid)" == "true" ]; then
		echo "${FUNCNAME[0]} PASSED"
	else
		echo "${FUNCNAME[0]} FAILED"
	fi
}

function get_goenv_env_value {
	env_var_name=$1
	if [ -z $env_var_name ]; then
		(>&2 echo "Usage: ${FUNCNAME[0]} <ENV_VAR_NAME>")
		return 
	fi
	ret=$(grep $env_var_name $GOENV_ENV_PATH | cut -d '=' -f 2)
	printf "$ret"
}

function get_goroot_bootstrap_path {
	get_goenv_env_value GOROOT_BOOTSTRAP
}
function test_get_goroot_bootstrap_path {
	tmp_back_env_file=$(mktemp)
	mv $GOENV_ENV_PATH $tmp_back_env_file
	sample_data=/home/lex/.goenv/goroots/go1.11/go
	printf "AVAR=foo\nGOROOT_BOOTSTRAP=${sample_data}\nBVAR=bar" > $GOENV_ENV_PATH
	if [ "$(get_goroot_bootstrap_path)" == "$sample_data" ]; then
		echo "${FUNCNAME[0]} PASSED"
	else
		echo "${FUNCNAME[0]} FAILED"
	fi
	mv $tmp_back_env_file $GOENV_ENV_PATH
}

function get_goroot_path {
	goroot_path="$(get_goenv_env_value GOROOT=)"
	if [ "$goroot_path" == "" ]; then
		(>&2 echo "${FUNCNAME[0]}: GOROOT value missing in $GOENV_ENV_PATH")
		return 
	fi
	printf $goroot_path
}

function ensure_go_roots_dir_exists {
    if [ ! -d $GOENV_GOROOTS_PATH ]; then
		mkdir -p $GOENV_GOROOTS_PATH
    fi
}
function test_ensure_go_roots_dir_exists {
    ensure_go_roots_dir_exists
    if [ "$?" == "0" ]; then
		echo "${FUNCNAME[0]} PASSED"
	else
		echo "${FUNCNAME[0]} FAILED"
    fi
}

function path_with_this_dir_prepended {
	path_to_add=$1
	if [ -z $path_to_add ]; then
		(>&2 echo "Usage: ${FUNCNAME[0]} <PATH_TO_ADD>")
		return 
	fi
	new_path=""
	PATH="$PATH\n"
	printf "$PATH" | tr ':' '\n' | ( while read line
		do
			if [ "$line" != "$path_to_add" ] ; then
				if [ "$new_path" == "" ]; then
					new_path="$line"
				else
					new_path="$new_path:$line"
				fi
			fi
		done
		new_path="${path_to_add}:${new_path}"
		printf $new_path
	)
}
function test_path_with_this_dir_prepended {
	save_path=$PATH
	export PATH="/usr/local/bin:/usr/bin:/bin:~/bin"
	new_path=$(path_with_this_dir_prepended /tmp)
    if [ "$new_path" == "/tmp:${PATH}" ]; then
		echo "${FUNCNAME[0]} PASSED"
	else
		echo "${FUNCNAME[0]} FAILED"
    fi	
	export PATH=$save_path
}

function add_to_path {
	dir_to_prepend=$1
	export PATH=$(path_with_this_dir_prepended $dir_to_prepend)
}

function install {
	if [ ! -e $GOENV_SHELL_INIT_FILE ]; then
		echo "WARNING: GOENV_SHELL_INIT_FILE ($GOENV_SHELL_INIT_FILE) did already not exist."
	fi
	if [ "$1" == "goenv" ]; then
		grep .goenv/bin $GOENV_SHELL_INIT_FILE &>/dev/null
		if [ "$?" == "0" ]; then
			echo "The goenv bin path has already been exported in $GOENV_SHELL_INIT_FILE."
		else
			goenv_export="export PATH=\$PATH:\$HOME/.goenv/bin\n"
			printf "\n${goenv_export}" >> $GOENV_SHELL_INIT_FILE
			echo "We just exported the goenv bin path in $GOENV_SHELL_INIT_FILE."
			echo "Open a new terminal (or restart this shell) to get goenv added to your PATH."
		fi
	else
		install_go "$@"
	fi
}


# $1 must be in this format: go1.11.1
function install_go {
    go_version=$1
    if [ -z $go_version ]; then
		echo "Missing GO_VERSION."
		echo "Usage: $(basename $0) <GO_VERSION>"
		echo "Example: $(basename $0) go1.11.1"
		return &>/dev/null; exit 2
    fi
    if [ "$(is_valid_go_ver ${go_version})" == "false" ]; then
		echo "Invalid GO_VERSION."
		echo "Usage: $(basename $0) <GO_VERSION>"
		echo "Example: $(basename $0) go1.11.1"
		return &>/dev/null; exit 2
    fi
	ensure_go_roots_dir_exists
    pushd $GOENV_GOROOTS_PATH
    if [ -d "./$go_version" ]; then
		echo "$go_version already exists.  Do you want to continue? (yes/no)"
		read x && x=${x:-no}
		if [ "$x" != "yes" ]; then
			echo "WARNING: Since you didn't type 'yes' ... We're aborting!"
			return &>/dev/null; exit 3
		fi
		rmrf "./$go_version"
    fi   

	new_goroot="$HOME/.goenv/goroots/$go_version"
	export GOROOT_BOOTSTRAP=$(get_goroot)
	export GOROOT=$GOROOT_BOOTSTRAP
	export GOPATH=$GOROOT_BOOTSTRAP
	export GOBIN=$GOPATH/bin
    save_goroot_bootstrap_path=$(get_goroot_bootstrap_path)
	git clone $GOENV_GO_SOURCE_REPO $go_version
	cd $go_version
	git checkout $go_version
    cd src
    ./make.bash  #/all.bash runs old go1.4 tests that fail    
	add_to_path "${GOROOT}/bin"
    printf "GOROOT_BOOTSTRAP=${save_goroot_bootstrap_path}\nGOROOT=${new_goroot}\n" > $GOENV_ENV_PATH
    
    # Set the current Go runtime to the version of Go we just installed.
    use_ver $go_version
    popd
}

# $1 must be in this format: go1.11.1
function uninstall {
    go_version=$1
    if [ -z $go_version ]; then
		echo "Missing GO_VERSION."
		echo "Usage: $(basename $0) <GO_VERSION>"
		echo "Example: $(basename $0) go1.11.1"
		return &>/dev/null; exit 2
    fi
    if [ "$(is_valid_go_ver ${go_version})" == "false" ]; then
		echo "Invalid GO_VERSION."
		echo "Usage: $(basename $0) <GO_VERSION>"
		echo "Example: $(basename $0) go1.11.1"
		return &>/dev/null; exit 2
    fi
    if [ ! -z $2 ]; then
		echo "This command deletes one goroot at a time.  You must rerun it for additional goroots versions"
    fi
	ensure_go_roots_dir_exists
    rmrf $GOENV_GOROOTS_PATH/$go_version  	
}

# $1 must be in this format: go1.11.1
function use_ver {
    go_version=$1
    if [ -z $go_version ]; then
		echo "Missing GO_VERSION."
		echo "Usage: $(basename $0) <GO_VERSION>"
		echo "Example: $(basename $0) go1.11.1"
		return &>/dev/null; exit 2
    fi
    if [ "$(is_valid_go_ver ${go_version})" == "false" ]; then
		echo "Invalid GO_VERSION."
		echo "Usage: $(basename $0) <GO_VERSION>"
		echo "Example: $(basename $0) go1.11.1"
		return &>/dev/null; exit 2
    fi
	ensure_go_roots_dir_exists
    pushd $GOENV_GOROOTS_PATH &>/dev/null
    if [ ! -d "./$go_version" ]; then
		echo "$go_version does not exist. You must first install it."
		return
    fi
	export GOROOT="$HOME/.goenv/goroots/$go_version"
    save_goroot_bootstrap_path=$(get_goroot_bootstrap_path)
	add_to_path "${GOROOT}/bin"
    printf "GOROOT_BOOTSTRAP=${save_goroot_bootstrap_path}\nGOROOT=${GOROOT}\n" > $GOENV_ENV_PATH
    popd &>/dev/null
}

function list_installed_goroots {
	ensure_go_roots_dir_exists
	find $GOENV_GOROOTS_PATH -maxdepth 1 -type d | tail -n +2
}

function list_available_go_versions {
	ensure_go_roots_dir_exists
	num_versions_installed=$(find $GOENV_GOROOTS_PATH -maxdepth 1 -type d | tail -n +2 | wc | awk '{print $1}')
	if [ "$num_versions_installed" == "0" ]; then
		go_version=go1.11.1
		tmp_goroot_path=$GOENV_HOME/tmp_goroot
		if [ -d $tmp_goroot_path/$go_version ]; then
			cd $tmp_goroot_path
		else
			mkdir $tmp_goroot_path
			echo "We must download a go version in order to proceed.  About to download $go_version.  Do you want to continue? (yes/no)"
			read x && x=${x:-no}
			if [ "$x" != "yes" ]; then
				echo "WARNING: Since you didn't type 'yes' ... We're aborting!"
				return &>/dev/null
			fi
			cd $tmp_goroot_path
			git clone $GOENV_GO_SOURCE_REPO $go_version
			cd $go_version			
		fi
	else
		first_goroot=$(find $GOENV_GOROOTS_PATH -maxdepth 1 -type d | tail -n 1)
		if [ ! -d $first_goroot ]; then
			echo "Unable to find valid goenv GOROOT path in GOENV_GOROOTS_PATH ($GOENV_GOROOTS_PATH)"
			return
		fi
		cd $first_goroot
	fi
	git tag | egrep '^go.+'
}

function info {
	printf "\n CURRENT GO VERSION:    $(go version)"
	print_env_vars
}

function help {
	echo "$INFO"
}

function run_tests {
	test_is_valid_go_ver
	test_is_goenv_file_valid
	test_ensure_go_roots_dir_exists
	test_get_goroot_bootstrap_path
	test_path_with_this_dir_prepended
	test_get_goroot
}

set_env_vars

if [ "$1" == "install" ]; then
	shift 1
	install "$@"
elif [ "$1" == "uninstall" ]; then
	shift 1
	uninstall "$@"
elif [ "$1" == "use" ]; then
	shift 1
	use_ver "$@"
elif [ "$1" == "info" ]; then
	info
elif [ "$1" == "help" ] ||  [ "$1" == "" ]; then
	help
elif [ "$1" == "list-installed-versions" ]; then
	list_installed_goroots	
elif [ "$1" == "list-available-versions" ]; then
	list_available_go_versions	
elif [ "$1" == "run-tests" ]; then
	shift 1
	run_tests "$@"
elif [ "$1" == "set-env-vars" ]; then
	set_env_vars
elif [ "$1" == "set" ]; then
	set_current_gopath
elif [ "$1" == "cd" ]; then
	cd_to_gopath
fi
