#!/usr/bin/env bash
read -d '' INFO << TEXT
Filename:    goenv
Version:     1.1.3
Purpose:     To manage your Go (golang) runtime version(s).
Usage:       goenv [ 9.9.9 | persist | init | setup | info | check | version [goenv] | versions [available] | install 9.9 | uninstall 9.9 ]
Assumptions: 1) You have homebrew installed

Notes:
1) Run "goenv check" to verify that the $GOPATH and the current Go runtime version are equivalent.
2) If you call "goenv init", it will create $HOME/.goenv that will have the current Go runtime version number.
3) After running "goenv setup", you need to open a new terminal window (or source the current one).
4) No shims.  No rehashing.  Just plain shell commands and some brew.
5) Source goenv if you want to install or switch to a specific version of Go.
6) Author: Lex Sheehan

Examples:
  . goenv 1.4.3                        # To switch to latest version of golang 1.4
  . goenv 1.5.4                        # To switch to latest version of golang 1.5
  . goenv 1.9.4                        # To switch to go version 1.9.4
  . goenv perisist                     # To persist your go version in the $HOME/.goenv file
  . goenv init                         # To initialize your go environment with the version in the $HOME/.goenv file
  goenv setup                          # To install goenv (only need to do once).  Will be active in subsequent shells.
  goenv info                           # To display goenv information
  goenv help                           # To display goenv help information
  goenv check                          # To verify that your go runtime environment is okay
  goenv version                        # To get the current go runtime version
  goenv version goenv                  # To get the current goenv version
  goenv versions available             # To get a list of available Go versions
  goenv install 1.4                    # To install latest version of golang 1.4
  goenv uninstall 1.4                  # To uninstall latest version of golang 1.4
  goenv install 1.5                    # To install latest version of golang 1.5
  goenv uninstall 1.5                  # To uninstall latest version of golang 1.5
TEXT

USAGE=`echo "$INFO"|grep Usage`

if [ ! -z $2 ]; then
    if [ "$2" == "-v" ] || [ "$2" == "--verbose" ]; then
        VERBOSE=true
    elif [ "$2" != "goenv" ]; then
        echo "Invalid parameter: $2"
        exit 2
    fi
fi
GOENV_VERSION=$(echo "$INFO"|grep Version:)
BREW_GO_ROOT=/usr/local/Cellar/go
GOENV_VER_FILE=$HOME/.goenv/version
GOOD_STATUS="âˆš All good."
TIP="Don't forget to source goenv when running goenv commands that change your Go version (For more info run $ goenv info)"

function goversion {
    GOTEST=(`go version 2>/dev/null`)
    if [ "$?" != "0" ]; then
        exit 2
    fi
    echo $(go version|cut -d" " -f3|while read n; do echo "${n:2}"; done)
}

function goversions {
    if [ ! -z $VERBOSE ]; then
        echo "Installed Go versions:"
        brew info go|grep Cellar|grep -v export
    fi
}

function current_go_path {
    CURRENT_GO_VERSION=$1
    RET=""
    if [ -z $CURRENT_GO_VERSION ]; then
        echo "No CURRENT_GO_VERSION!"
    else
        RET="$(goversions | grep 1.4.3 | cut -d ' ' -f 1)"
    fi
    echo "$RET"
}

function usage {
    echo $USAGE
}

function lastest_brew_go_version {
    if [ ! -s $LATEST_BREW_GO_VER_FILE ]; then
        echo "$(goenv versions available|tail +1|head -n 1|cut -d' ' -f1)" > $LATEST_BREW_GO_VER_FILE
    fi
    cat $LATEST_BREW_GO_VER_FILE
}

function switchtogo_version {
    if [ -s $GOENV_VER_FILE ]; then
        echo $(cat $GOENV_VER_FILE)
    else
        echo ""
    fi
}

function goenv_version {
    echo $GOENV_VERSION|cut -d' ' -f2
}

function set_goenv_version {
    echo $(goenv_version) > $GOENV_VER_FILE
}


function switchgo {
    VER=$1
    if [ -z $VER ]; then
        echo "switchgo called without passing a go version to switch to."
        return
    fi
    echo "Switching Go to version $VER ..."

    GOVERSIONS=$(brew info go|grep Cellar)

    if [[ $GOVERSIONS != *"$VER"* ]]; then
        echo "Requested version ($VER) does not exist locally...Attempting to install from archives..."

        install $VER
    fi

    export GOROOT=$BREW_GO_ROOT/$VER/libexec
    if [[ ! -d $GOROOT ]]; then
        echo "ERROR:  $GOROOT is not a directory!"
        return
    else
        export PATH=$GOROOT/bin:$PATH
    fi

    NEW_GO_BIN=$GOROOT/bin/go
    GO_BINARY=$(which go)
    if [[ -e $NEW_GO_BIN ]] && [[ -e $GO_BINARY ]]; then
        brew link --overwrite go  &>/dev/null
        brew switch go $VER &>/dev/null
        echo $VER > $GOENV_VER_FILE
    else
        echo "ERROR:  $NEW_GO_BIN should exist and \$(which go) should be a link."
    fi
    GOBIN=$GOBIN
    if [ "$GOBIN" == "" ]; then
        if [ "$GOPATH" == "" ]; then
            echo "Set GOPATH and try again (to set GOBIN)."
        else
            export GOBIN=$GOPATH/bin
            echo "Exported GOBIN=$GOBIN"
        fi
    fi

}

# TODO: automate
function install {
    VER=$1
    HOMEBREW_BASE=$( brew --prefix )
    if [ "$VER" == "1.4" ]; then
      brew install go14
      if [ "$?" != "0" ]; then
         echo "Unable to install version ($VER)"
      else
         ln -s /usr/local/Cellar/go14/1.4.3 /usr/local/Cellar/go/1.4.3
      fi
    elif [ "$VER" == "1.5" ]; then
      brew install go15
      if [ "$?" != "0" ]; then
         echo "Unable to install version ($VER)"
      else
         ln -s /usr/local/Cellar/go15/1.5.4 /usr/local/Cellar/go/1.5.4
      fi
    elif [ "$VER" == "1.6" ]; then
      brew install go16
      if [ "$?" != "0" ]; then
         echo "Unable to install version ($VER)"
      else
         ln -s /usr/local/Cellar/go16/1.6.2 /usr/local/Cellar/go/1.6.2
      fi
    elif [ "$VER" == "1.7" ]; then
      # brew install go
      brew upgrade go
      if [ "$?" != "0" ]; then
         echo "Unable to install version ($VER)"
      fi
	elif [ "$VER" == "1.9.4" ]; then
		# brew install go
		brew install go@1.9
		if [ "$?" != "0" ]; then
			echo "Unable to install version ($VER)"
		else
			if [ -e /usr/local/Cellar/go@1.9/1.9.4 ]; then
				ln -s /usr/local/Cellar/go@1.9/1.9.4 /usr/local/Cellar/go/1.9.4
			fi
		fi
    else
        echo "The requrested Go version ($VER) is not valid."
        return
    fi
    # set_goenv_version
}

function uninstall {
    VER=$1
    if [[ $BREW_GO_ROOT == *"Cellar"* ]] && [[ -d $BREW_GO_ROOT/$VER ]]; then
        printf "Removing $BREW_GO_ROOT/$VER..."
        rm -rf $BREW_GO_ROOT/$VER
        echo "Done."
    else
        echo "$VER is not installed."
    fi

    if [ "$VER" == "1.4" ]; then
        brew uninstall go14
        if [ "$?" != "0" ]; then
            echo "Unable to uninstall version ($VER)"
        else
            rm /usr/local/Cellar/go/1.4.3
        fi
        elif [ "$VER" == "1.5" ]; then
        brew uninstall go15
        if [ "$?" != "0" ]; then
            echo "Unable to install version ($VER)"
        else
            rm /usr/local/Cellar/go/1.5.4
        fi
        elif [ "$VER" == "1.6" ]; then
        brew uninstall go
        if [ "$?" != "0" ]; then
            echo "Unable to install version ($VER)"
        fi
    else
        echo "The requrested Go version ($VER) is not valid."
        return
    fi
}

function check {
    tput setab 0
    which go &>/dev/null
    if [ "$?" != "0" ]; then
        tput setaf 1
        printf "ERROR:  Go command not found."
    else
        GOVER=$(goversion)
        echo $PATH | grep "$GOBIN" &>/dev/null
        if [ "$?" == "0" ]; then
            IS_GOBIN_IN_PATH="yes"
        else
            IS_GOBIN_IN_PATH="no"
        fi
        if [ "$?" != "0" ]; then
            tput setaf 1
            printf "ERROR:  Go command not found."
            elif [ "$IS_GOBIN_IN_PATH" == "no" ]; then
            tput setaf 1
            printf "ERROR:  GOBIN is not in the PATH environment variable."
        else
            if [[ $GOROOT == *"$GOVER"* ]]; then
                if [ "$GOPATH" == "" ]; then
                    tput setaf 3
                    printf "WARNING: \$GOPATH is not set."
                else
                    TMPFILE="/tmp/$(date +%Y%m%d-%H%M%S)_GOPATH_ERR_FOUND"
                    echo $GOPATH | tr ':' '\n' | while read line
                    do
                        if [[ ! -e "$line" ]]; then
                            echo "true" > $TMPFILE
                            tput setaf 3
                            printf "WARNING: $line is not a valid directory. "
                        fi
                    done
                    if [ ! -f $TMPFILE ]; then
                        tput setaf 2
                        printf $GOOD_STATUS;                  
                    fi
                    rm $TMPFILE 2>/dev/null
                fi
            else
                tput setaf 1
                printf "ERROR: \$GOROOT != Go version"
            fi
        fi
    fi
    tput sgr0
}

if [ "$1" == "-?" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ "$1" == "help" ]; then
    echo "$INFO"

elif [ "$1" == "init" ]; then
    LATEST_BREW_GO_VER="$(lastest_brew_go_version)"
    if ! which go > /dev/null && [ "$LATEST_BREW_GO_VER" != "" ]; then
        echo ""
        echo "Go is not currently installed but homebrew has a version.  Press Enter to install Go version $LATEST_BREW_GO_VER --or-- CTRL+C to Cancel."
        read x
        install $LATEST_BREW_GO_VER
        echo "GOENV_VER_FILE: $GOENV_VER_FILE"
        echo "$LATEST_BREW_GO_VER" > $GOENV_VER_FILE
    fi

    if [ -s $GOENV_VER_FILE ]; then
        switchgo $(cat $GOENV_VER_FILE)
    fi

elif [ "$1" == "persist" ]; then

    VER=$(goversion)
    `cat $VER > $GOENV_VER_FILE`

elif [ "$1" == "version" ]; then
    if [ "$2" == "goenv" ] ; then
      echo "$(goenv_version)"
    else
      echo $(goversion)
    fi

elif [ "$1" == "versions" ]; then
    echo "This feature has been DEPRECATED."
    exit 5
    # TODO: Add this feature back
    if [ "$2" == "available" ] ; then
        brew versions go
    else
        echo "$(goversions)"
    fi

elif [ "$1" == "upgrade" ]; then
    brew upgrade go

elif [ "$1" == "install" ]; then
    install $2


elif [ "$1" == "uninstall" ]; then
    uninstall $2

elif [ "$1" == "setup" ]; then
    printf "\nif which goenv > /dev/null; then . goenv init; fi" >> $HOME/.bashrc


elif [ "$1" == "check" ]; then
    STATUS=$(check)
    echo "$STATUS"

    if [ "$STATUS" == "$GOOD_STATUS" ]; then
        exit 0
     else
        echo ""
        echo "Go version: $(goversion)"
        echo "\$GOROOT   : $GOROOT"
        echo ""
        echo "$TIP"
        echo ""
        exit 1
    fi

elif [ "$1" == "info" ]; then
    status="$(check)"
    echo "STATUS: $status"
    if [[ ! "$status" == *"âˆš"* ]]; then
        echo "TIP: $TIP"
    fi

    echo "GOROOT: $GOROOT"
    echo "GOPATH: $GOPATH"
    echo "GOBIN : $GOBIN"
    echo "GOOS  : $GOOS"
    echo "GOARCH: $GOARCH"
    if [ ! -z $VERBOSE ]; then
       echo -e "----\nPATH: $(echo $PATH | tr ':' '\n')\n----"
       echo "Current Go version: $(goversion)"
       echo "Latest Brew Go version file: $LATEST_BREW_GO_VER_FILE"
       echo "switchtogo version file: $GOENV_VER_FILE"
       echo "switchtogo version: $(switchtogo_version)"
       echo "goenv version: $(goenv_version)"
       echo "$(goversions)"
    fi

elif [[ $1 =~ [0-9]\.[0-9]\.[0-9] ]] || [[ $1 =~ [0-9]\.[0-9] ]]; then
    # set -x
    # trap read debug
    # Accepts versions of format:  Examples: 1.3.3, 1.4
    switchgo $1
else
    usage
fi
