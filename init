#!/bin/bash
# Author : Lex Sheehan
# Purpose: This script initializes a go project with glide dependency management
# For details see: https://www.amazon.com/Learning-Functional-Programming-Lex-Sheehan-ebook/dp/B0725B8MYW
# License: MIT, 2017 Lex Sheehan LLC
MY_DEV_DIR=~/dev
CURRENT_GO_VERSION=1.9.2
USES_TOML_CONFIG_YN=no
LOCAL_BIN_DIR=/usr/local/bin/
#WIN_GOPATH="E:\\\alice\\\dev\\\learn-fp-go\\\1-functional-fundamentals\\\ch01-pure-fp\\\01_oop"
# ---------------------------------------------------------------
# Verify variables above are correct.  Do not modify lines below.
if [ ! -z $WIN_GOPATH ]; then
    export GOPATH="$WIN_GOPATH"
    export GOBIN="$GOPATH\\bin"
    pushd $HOME
    popd
fi
if [ -L "$(pwd)" ]; then
    echo "You must be in the real project directory to run this init script.  You are currently in a linked directory"
    echo "Running:  ln -l \"$(pwd)\""
    ls -l "$(pwd)"
    return
fi
CURRENT_GOVERSION="go$CURRENT_GO_VERSION"
ORIG_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DEV_DIR="$MY_DEV_DIR/$(basename $ORIG_DIR)"
PROJECT_DIR_LINK="$MY_DEV_DIR/$(basename $ORIG_DIR)"
if [ -L "$PROJECT_DIR_LINK" ]; then
    rm "$PROJECT_DIR_LINK"
fi
if [ ! -d "$MY_DEV_DIR" ]; then
    mkdir "$MY_DEV_DIR"
fi
# Create link to project directory in MY_DEV_DIR
set -x
ln -s "$ORIG_DIR" "$PROJECT_DIR_LINK"
{ set +x; } 2>/dev/null
cd "$PROJECT_DIR_LINK"
if [ -z $WIN_GOPATH ]; then
    export GOPATH=$ORIG_DIR
    export GOBIN=$ORIG_DIR/bin
fi
if [ -e "$GOBIN" ]; then
    rm "$GOBIN/*" 2>/dev/null
else
    mkdir "$GOBIN"
fi
#[ $(which "$(basename $(pwd))") ] && { echo "An executable named $(basename $(pwd)) found on path here: $(which $(basename $(pwd))). Continue anyway? (yes/no)"; read CONTINUE_YN; if [[ "$CONTINUE_YN" =~ ^(yes|y)$ ]]; then echo 'Okay, but when you run go-run it may run the pre-existing binary.'; else echo "You might want to rename this project directory ($(basename $(pwd))) to a name that does not match a pre-existing binary name."; return; fi; } 2>/dev/null
APP_NAME=$(basename $(pwd))
GOVERSION=$(go version)
echo "Installed Go version: $GOVERSION"
type goenv 2>/dev/null
if [ $? == 0 ]; then
    # Attempt to automatically set desired/current go version.  This requires goenv.
    . goenv "$CURRENT_GO_VERSION"
    echo "GOVERSION: $GOVERSION"
    echo "CURRENT_GOVERSION: $CURRENT_GOVERSION"
    if [ -z "$GOVERSION" ] || [[ "$(echo $GOVERSION | awk '{print $3}')" != "$CURRENT_GOVERSION" ]]; then
      echo "Expected Go version $CURRENT_GOVERSION to be installed"
      return
    fi
else
    if [ -z "$GOVERSION" ] || [[ "$(echo $GOVERSION | awk '{print $3}')" != "$CURRENT_GOVERSION" ]]; then
        echo "Expected Go version $CURRENT_GOVERSION to be installed.  Consider using github.com/l3x/goenv to manage your go runtimes."
        return
    fi
fi
command -v goimports >/dev/null 2>&1 || { echo >&2 "Missing goimports.  For details, see: https://github.com/bradfitz/goimports"; return; }
command -v glide >/dev/null 2>&1 || { echo >&2 "Missing glide.  For details, see: https://github.com/Masterminds/glide"; return; }
if [ ! -e ./src ]; then
    mkdir src
fi

if [ ! -e ./src/mypackage/ ]; then
    mkdir ./src/mypackage
fi

if [ ! -e ./src/mypackage/myname.go ]; then
    cat > ./src/mypackage/myname.go <<TEXT
package mypackage

func MyName() string { return "Alice" }
TEXT
fi

if [ ! -e ./main.go ]; then
    cat > ./main.go <<TEXT
package main

import (
    "mypackage"
)

func main() {
    println("hello from main.go")
    println(mypackage.MyName() + " says hi from mypackage")
}
TEXT
fi

if [ ! -e ./.gitignore ]; then
    cat > ./.gitignore <<TEXT
# Binaries for programs and plugins
*.exe
*.dll
*.so
*.dylib

# Test binary, build with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736
.glide/

# Temporary backup file created by sed in prune-project alias
main.go-e
TEXT
fi

if [ "${PATH/$GOBIN}" == "$PATH" ] ; then
  export PATH=$PATH:$GOBIN
fi

if [[ "$USES_TOML_CONFIG_YN" =~ ^(yes|y)$ ]]; then
    if [ ! -e ./config.toml ]; then
        echo You were missing the config.toml configuration file... Creating bare config.toml file ...
        echo -e "# Runtime environment\napp_env = \"development\"" > config.toml
    fi
    ls -l config.toml
    if [ ! -z $WIN_GOPATH ]; then
        alias go-run="go build && ./$APP_NAME.exe -config ./config.toml"
    else
        alias go-run="go install && $APP_NAME -config ./config.toml"
    fi
else
    if [ ! -z $WIN_GOPATH ]; then
        alias go-run="go build && ./$APP_NAME.exe"
    else
        alias go-run="go install && $APP_NAME"
    fi
fi
alias go-test='go test  ./... 2>&1 | grep -v "$(basename $(pwd))\t\[no test files"'
alias go-test-bench='go test -bench=. ./... 2>&1 | grep -v "$(basename $(pwd))\t\[no test files"'
alias glide-ignore-project-dirs="printf \"ignore:\n$(find ./src -maxdepth 1 -type d | tail -n +2 | sed 's|./src\/||' | sed -e 's/^/- \.\//')\n\""
alias prune-project="(rm -rf bin pkg vendors;rm glide.*;rm -rf ./src/mypackage;sed -i -e '/mypackage/ s/^#*/\/\//' main.go) 2>/dev/null"
alias show-path='echo $PATH | tr ":" "\n"'
alias prune-path='export PATH="$(echo $PATH | tr ":" "\n" | uniq | grep -v "$(dirname $ORIG_DIR)" | tr "\n" ":")"; if [[ "$PATH" =~ ':'$ ]]; then export PATH="${PATH::-1}";fi'
alias find-imports='find . -type f -name "*.go" -exec grep -A3 "import" {} \; -exec echo {} \; -exec echo --- \;'
alias go-fmt='set -x;goimports -w main.go src/*;{ set +x; } 2>/dev/null'
if [ ! -z $WIN_GOPATH ]; then
    export GOPATH="$WIN_GOPATH"
    alias glide-update='if [ ! -z $(readlink `pwd`) ]; then export LINKED=true && pushd "$(readlink `pwd`)"; fi;rm -rf {vendor,vendors};rm glide.* 2>/dev/null;export GOPATH="$WIN_GOPATH:$WIN_GOPATH\\\vendors" && export GOBIN="$WIN_GOPATH/bin" && glide init --non-interactive && glide-ignore-project-dirs >> glide.yaml && glide up && mvglide && if [ $LINKED==true ]; then popd;fi'
    alias mvglide='mkdir -p vendors && mv vendor/ vendors/src/ && export GOPATH="$GOPATH"\\\\vendors:"$GOPATH";echo "vendor packages have been moved to $(pwd)/vendors and your GOPATH: $GOPATH"'
else
    alias glide-update='if [ ! -z $(readlink `pwd`) ]; then export LINKED=true && pushd "$(readlink `pwd`)"; fi;rm -rf {vendor,vendors};rm glide.* 2>/dev/null;export GOPATH=$(pwd):$(pwd)/vendors && export GOBIN=$(pwd)/bin && glide init --non-interactive && glide-ignore-project-dirs >> glide.yaml && glide up && mvglide && if [ $LINKED==true ]; then popd;fi'
    alias mvglide='mkdir -p vendors && mv vendor/ vendors/src/ && export GOPATH=$(pwd)/vendors:$(pwd);echo "vendor packages have been moved to $(pwd)/vendors and your GOPATH: $GOPATH"'
fi
tdml() {
   if [ -z $1 ]; then LEVEL=2; else LEVEL=$1;fi
   tree -C -d -L $LEVEL
}
get-go-binary() {
    GO_BINARY_URL="$1"
    if [ -z $GO_BINARY_URL ]; then
        echo "Missing GO_BINARY_URL.  Usage: get-go-binary <GO_BINARY_URL>   Example: get-go-binary github.com/nicksnyder/go-i18n/goi18n"
        return
    fi
    TMP_DIR="tmp_dir_$RANDOM"; mkdir "$TMP_DIR"; pushd "$TMP_DIR";
    if [ ! -z $WIN_GOPATH ]; then
        export GOPATH="$WIN_GOPATH"
    else
        export GOPATH="$(pwd)"
    fi
    go get -u $GO_BINARY_URL; popd; rm -rf "$TMP_DIR"
}
echo You should only need to run this init script once.
echo Add Go source code files under the src directory.
echo After updating dependencies, i.e., adding a new import statement, run:  glide-update
echo To build and run your app, run:  go-run
